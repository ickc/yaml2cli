SHELL = /usr/bin/env bash

# configure engine
python = python
pip = pip

yaml2cli = coverage run --branch -a yaml2cli/yaml2cli.py

# pandoc
HTMLVersion = html5
CSSURL = https://cdn.jsdelivr.net/gh/ickc/markdown-latex-css
# command line arguments
pandocArgCommon = -f markdown+autolink_bare_uris-fancy_lists --toc -V linkcolorblue -V citecolor=blue -V urlcolor=blue -V toccolor=blue -M date="`date "+%B %e, %Y"`"
## MD
pandocArgMD = -f markdown+abbreviations+autolink_bare_uris+markdown_attribute+mmd_header_identifiers+mmd_link_attributes+mmd_title_block+tex_math_double_backslash-latex_macros-auto_identifiers -t markdown+raw_tex-native_spans-simple_tables-multiline_tables-grid_tables-latex_macros -s --wrap=none --column=999 --atx-headers --reference-location=block --file-scope
## HTML/ePub
pandocArgHTML = $(pandocArgCommon) -t $(HTMLVersion) --toc-depth=2 -s -N -c $(CSSURL)/css/common.min.css -c $(CSSURL)/fonts/fonts.min.css
# GitHub README
pandocArgReadmeGitHub = $(pandocArgCommon) --toc-depth=2 -s -t markdown_github --reference-location=block
pandocArgReadmePypi = $(pandocArgCommon) -s -t rst --reference-location=block -f markdown+autolink_bare_uris-fancy_lists-implicit_header_references

docs = docs/index.html README.md README.rst README.html

examples = examples/mode1-small.sh examples/mode1-large.sh examples/mode2.sh examples/example2/mode2-0000.sh examples/example2/mode2-0001.sh examples/mode3.sh

# Main Targets ########################################################################################################################################################################################

docs: $(docs)
readme: docs
example: pytest $(examples)
test: example pytest pep8
	coverage html
testFull: pytest pep8 pylint
	coverage html

clean:
	rm -f .coverage README.html $(examples)
	rm -rf htmlcov yaml2cli.egg-info .cache dist examples/example2
	find -maxdepth 1 -type f -name '.coverage*' -delete
	find . -type f -name "*.py[co]" -delete -or -type d -name "__pycache__" -delete
Clean: clean
	rm -f $(docs)

# Making dependancies #################################################################################################################################################################################

# $(examples)
examples/mode1-%.sh: examples/example.yml examples/example.sh
	$(yaml2cli) mode1 -y $< -p examples/example.sh -o $@ -H $*
examples/mode2.sh: examples/example.yml examples/example.sh
	$(yaml2cli) mode2 -y $< -p examples/example.sh -o $@
examples/mode3.sh: examples/example.yml examples/example.sh
	$(yaml2cli) mode3 -y $< -p examples/example.sh -o $@
# examples/example2/mode2-0001.sh is done for free
examples/example2/mode2-0000.sh: examples/example.yml examples/example.sh
	$(yaml2cli) mode2 -y $< -p examples/example.sh -d $(@D) -N 1 -n 'mode2'

# readme
## index.html
docs/index.html: docs/badges.markdown docs/README.md
	pandoc $(pandocArgHTML) $^ -o $@
## GitHub README
README.md: docs/badges.markdown docs/README.md
	printf "%s\n\n" "<!--This README is auto-generated from \`docs/README.md\`. Do not edit this file directly.-->" > $@
	pandoc $(pandocArgReadmeGitHub) $^ >> $@
## PyPI README
README.rst: docs/badges.markdown docs/README.md
	printf "%s\n\n" ".. This README is auto-generated from \`docs/README.md\`. Do not edit this file directly." > $@
	pandoc $(pandocArgReadmePypi) $^ >> $@
README.html: README.rst
	rst2html.py $< > $@

# maintenance #########################################################################################################################################################################################

# Deploy to PyPI
## by Travis, properly git tagged
pypi:
	git tag -a v$$($(python) setup.py --version) -m 'Deploy to PyPI' && git push origin v$$($(python) setup.py --version)
## Manually
pypiManual:
	$(python) setup.py sdist upload || twine upload dist/*

init:
	$(pip) install -r requirements.txt
	$(pip) install -r tests/requirements.txt

dev:
	$(pip) install -e .[test]

pytest:
	$(python) -m pytest -vv --cov=yaml2cli --cov-branch tests

# check python styles
pep8:
	pycodestyle . --ignore=E402,E501,E731
pep8Strict:
	pycodestyle .
pyflakes:
	pyflakes .
flake8:
	flake8 .
pylint:
	pylint yaml2cli

# cleanup python
autopep8:
	autopep8 . --recursive --in-place --pep8-passes 2000 --verbose
autopep8Aggressive:
	autopep8 . --recursive --in-place --pep8-passes 2000 --verbose --aggressive --aggressive

# pasteurize
past:
	pasteurize -wnj 4 .
